"""
字典的定义：
    字典是另一种可变容器模型，且可存储任意类型对象
创建的字典：
    字典的每个键值(key=>value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({ })中 ,
    格式如下所示：
        d = {key1 : value1, key2 : value2 }
    i、键必须是唯一的，但值则不必。
    ii、值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。
"""
# 定义字典
dict1 = {'Name': 'Tom', 'sex': '男', 'both': 2019}
print(dict1['Name'])

# 修改字典：向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值
dict1['Name'] = 'Timi'  # 更新键值
print(dict1)

dict1['weight'] = 90  # 新增键值
print(dict1)

dict2 = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}
del dict2['Name']  # 删除键值
print(dict2)

dict2.clear()  # 清空字典
print(dict2)

# dict3 = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}
# del dict3  # 删除字典
# print(dict3)  # 会报错

# 字典键的特性
"""
    字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。
    两个重要的点需要记住：
        1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住;
        2）键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行;
"""

# 字典内置函数&方法
"""
函数：
    1   len(dict)：计算字典元素个数，即键的总数。
    2	str(dict)：输出字典，以可打印的字符串表示。
    3	type(variable)：返回输入的变量类型，如果变量是字典就返回字典类型。
方法：
    1	radiansdict.clear()：删除字典内所有元素
    2	radiansdict.copy()：返回一个字典的浅复制
    3	radiansdict.fromkeys()：创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值
    4	radiansdict.get(key, default=None)：返回指定键的值，如果值不在字典中返回default值
    5	key in dict：如果键在字典dict里返回true，否则返回false
    6	radiansdict.items()：以列表返回可遍历的(键, 值) 元组数组
    7	radiansdict.keys()：返回一个迭代器，可以使用 list() 来转换为列表
    8	radiansdict.setdefault(key, default=None)：和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default
    9	radiansdict.update(dict2)：把字典dict2的键/值对更新到dict里
    10	radiansdict.values()：返回一个迭代器，可以使用 list() 来转换为列表
    11	pop(key[,default])：删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。
    12	popitem()：随机返回并删除字典中的一对键和值(一般删除末尾对)。
"""



"""
序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，
或索引，第一个索引是0，第二个索引是1，依此类推。
Python有6个序列的内置类型，但最常见的是列表和元组。
序列都可以进行的操作包括索引，切片，加，乘，检查成员。
此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。
列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。
列表的数据项不需要具有相同的类型
"""

# 创建列表，只要把逗号分隔的不同的数据项使用方括号括起来即可
list1 = ['Google', 'Runoob', 1997, 2000]
list2 = [1, 2, 3, 4, 5]
list3 = ["a", "b", "c", "d"]

# 访问列表中的数值
print(list1[0])

# 对列表的数据项进行修改或更新，也可以使用append()方法来添加列表项
print("修改前list1[1]的值：", list1[1])
list1[1] = 'Python'
print("修改后list1[1]的值：", list1[1])

list1.append('hello')
print("添加元素后list1的值：", list1)

# 删除列表元素
print("删除元素前list2的值：", list2)
del list2[1]
print("删除元素后list2的值：", list2)

# 列表脚本操作符
print(len(list1))  # 计算列表的长度
print(list1+list2)  # 组合
print(list3*2)  # 重复
if "a" in list3:  # 判断元素是否在列表中
    print("在列表中")
else:
    print("不在列表中")

# 嵌套列表：在列表里创建其它列表
x = [list1, list3]
print("打印列表x:", x)
print("打印x的第一个元素:", x[0])

"""
1、函数：
1.1	    len(list)：列表元素个数
1.2 	max(list)：返回列表元素最大值
1.3	    min(list)：返回列表元素最小值
1.4	    list(seq)：将元组转换为列表
2、方法：
2.1	    list.append(obj)：在列表末尾添加新的对象
2.2	    list.count(obj)：统计某个元素在列表中出现的次数
2.3	    list.extend(seq)：在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
2.4	    list.index(obj)：从列表中找出某个值第一个匹配项的索引位置
2.5	    list.insert(index, obj)：将对象插入列表
2.6	    list.pop([index=-1])：移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
2.7	    list.remove(obj)：移除列表中某个值的第一个匹配项
2.8	    list.reverse()：反向列表中元素
2.9	    list.sort( key=None, reverse=False)：对原列表进行排序
2.10	list.clear()：清空列表
2.11	list.copy()：复制列表
"""



"""
    集合（set）是一个无序的不重复元素序列。
    可以使用大括号 { } 或者 set() 函数创建集合，
    注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。
    创建格式：
        parame = {value01,value02,...}
    或者
        set(value)
"""

# 创建集合
basket1 = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
basket2 = set(('apple', 'orange', 'apple', 'pear', 'orange', 'banana'))
print(basket2)  # 这里演示的是去重功能
print('orange' in basket1)  # 快速判断元素是否在集合内

# 展示两个集合间的运算
a = set('abracadabra')
b = set('alacazam')
print(a)
print(a - b)  # 集合a中包含而集合b中不包含的元素
print(a | b)  # 集合a或b中包含的所有元素
print(a & b)  # 集合a和b中都包含了的元素
print(a ^ b)  # 不同时包含于a和b的元素

# 同样集合支持集合推导式
c = {x for x in 'abracadabra' if x not in 'abc'}
print(c)

# 添加元素
# 格式：s.add(x)，将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作
thisset = {"Google", "Runoob", "Taobao"}
thisset.add("Tom")
print(thisset)

# 修改元素
# 格式：s.update(x)，也可以添加元素，且参数可以是列表，元组，字典等
thisset = set(("Google", "Runoob", "Taobao"))
thisset.update({1, 3})   # 列表
print(thisset)

thisset.update([1, 4], [5, 6])  # 列表
print(thisset)

tup = (1, 2)
thisset.update(tup)  # 元组
print("元组:", thisset)

dic1 = {'Name': 'Tom'}
thisset.update(dic1)  # 字典
print("字典:", thisset)

# 移除元素
"""
    1   s.remove( x )：将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。
    2   s.discard( x )：移除集合中的元素，且如果元素不存在，不会发生错误。
    3   s.pop() ：随机删除集合中的一个元素
"""
# thisset = set(("Google", "Runoob", "Taobao"))
# thisset.remove("Taobao")
# thisset.discard("Taobao")
# thisset.pop()

# 计算集合元素的个数
print(len(thisset))

# 清空集合内的元素
print(thisset.clear())

# 判断元素是否在集合内
# 格式：x in s
print("Taobao" in thisset)

# 集合内置方法完整列表
"""
    1   add()：为集合添加元素
    2   clear()：移除集合中的所有元素
    3   copy()：拷贝一个集合
    4   difference()：返回多个集合的差集
    5   difference_update()：移除集合中的元素，该元素在指定的集合也存在。
    6   discard()：删除集合中指定的元素
    7   intersection()：返回集合的交集
    8   intersection_update()：返回集合的交集。
    9   isdisjoint()：判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。
    10  issubset()：判断指定集合是否为该方法参数集合的子集。
    11  issuperset()：判断该方法的参数集合是否为指定集合的子集
    12  pop()：随机移除元素
    13  remove()：移除指定元素
    14  symmetric_difference()：返回两个集合中不重复的元素集合。
    15  symmetric_difference_update()：移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。
    16  union()：返回两个集合的并集
    17  update()：给集合添加元素
"""



# 字符串是 Python 中最常用的数据类型。我们可以使用引号( ' 或 " )来创建字符串。
# 创建字符串很简单，只要为变量分配一个值即可
str1 = 'hello word'
str2 = "Runoob"

# 访问字符串中的值，可以使用方括号[]来截取字符串
# 截取字符串中的一部分，遵循左闭右开原则，str[0,2] 是不包含第 3 个字符的。
print("str1[0]:", str1[0])  # 0 表示字符串的第1个数值
print("str2[1:3]:", str2[1:3])  # 1:3 表示取字符串第2个到第3个数之间的值

# 字符串更新:可以截取字符串的一部分并与其他字段拼接
print("str2更新后的结果是：", str2[2:4]+",hello")

# 转义字符，\n就是换行，其他的一些转义字符都可以了解
print("结果：", str1+"\n"+str2)  # \n就是换行

# 字符串运算，例：“+”就是将2个字符串连接起来
print(str1+str2)

# 字符串格式化：%
print("第一个字符串:%s" % str1)

# 三引号
para_str = """这是一个多行字符串的实例
多行字符串可以使用制表符
TAB ( \t )。
也可以使用换行符 [ \n ]。
"""
print(para_str)

# 字符串内建函数
print(max(str1))  # max()返回字符串中最大的字母

""""
1	capitalize()：将字符串的第一个字符转换为大写
2	center(width, fillchar)：返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。
3	count(str, beg= 0,end=len(string))：返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数
4	bytes.decode(encoding="utf-8", errors="strict")：Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。
5	encode(encoding='UTF-8',errors='strict')：以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace'
6	endswith(suffix, beg=0, end=len(string))：检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.
7	expandtabs(tabsize=8)：把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。
8	find(str, beg=0, end=len(string))：检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1
9	index(str, beg=0, end=len(string))：跟find()方法一样，只不过如果str不在字符串中会报一个异常.
10	isalnum()：如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False
11	isalpha()：如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False
12	isdigit()：如果字符串只包含数字则返回 True 否则返回 False..
13	islower()：如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False
14	isnumeric()：如果字符串中只包含数字字符，则返回 True，否则返回 False
15	isspace()：如果字符串中只包含空白，则返回 True，否则返回 False.
16	istitle()：如果字符串是标题化的(见 title())则返回 True，否则返回 False
17	isupper()：如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False
18	join(seq)：以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串
19	len(string)：返回字符串长度
20	ljust(width[, fillchar])：返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。
21	lower()：转换字符串中所有大写字符为小写.
22	lstrip()：截掉字符串左边的空格或指定字符。
23	maketrans()：创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。
24	max(str)：返回字符串 str 中最大的字母。
25	min(str)：返回字符串 str 中最小的字母。
26	replace(old, new [, max])：把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。
27	rfind(str, beg=0,end=len(string))：类似于 find()函数，不过是从右边开始查找.
28	rindex( str, beg=0, end=len(string))：类似于 index()，不过是从右边开始.
29	rjust(width,[, fillchar])：返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串
30	rstrip()：删除字符串字符串末尾的空格.
31	split(str="", num=string.count(str))：num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串
32	splitlines([keepends])：按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。
33	startswith(substr, beg=0,end=len(string))：检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。
34	strip([chars])：在字符串上执行 lstrip()和 rstrip()
35	swapcase()：将字符串中大写转换为小写，小写转换为大写
36	title()：返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())
37	translate(table, deletechars="")：根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中
38	upper()：转换字符串中的小写字母为大写
39	zfill (width)：返回长度为 width 的字符串，原字符串右对齐，前面填充0
40	isdecimal()：检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。
"""



"""
Python 的元组与列表类似，不同之处在于元组的元素不能修改。
元组使用小括号，列表使用方括号
"""

# 创建元组：在括号中添加元素，并使用逗号隔开即可
tup1 = ('Google', 'Runoob', 1997, 2000)
tup2 = (1, 2, 3, 4, 5)
tup3 = "a", "b", "c", "d"  # 不需要小括号也可以
print(type(tup3))  # 返回tup3的类型
tup4 = ()  # 创建空元组


# 当元组元素只有一个时，也需要加逗号。否则()会被当做运算符使用
tup6 = (60)
tup7 = (60,)
print("tup6的类型是：", type(tup6))
print("tup7的类型是：", type(tup7))

# 访问元素
# 元组里面的元素是不能被修改和删除
print(tup1[0])  # 访问元组的第1个元素
print(tup1[1:3])  # 访问元组的第2、3个元素
print(tup1+tup2)  # 将元组相连
# tup8 = (1, 2, 3, 4, 5)
# del tup8  # 删除了整个元组4
# print(tup8)  # 打印tup8时就会报错

# 元组的运算符：len，+，*，in
print(len(tup1))
"""
len((1, 2, 3)):计算元素个数；3
(1, 2, 3) + (4, 5, 6):连接 ；(1, 2, 3, 4, 5, 6)
('Hi!',) * 4:复制；	('Hi!', 'Hi!', 'Hi!', 'Hi!')
3 in (1, 2, 3)：判断元素是否存在；True	
for x in (1, 2, 3): print (x,)：迭代；1 2 3	
"""

# 元组的索引、截取
print(tup1[2])  # 读取元组的第3个元素
print(tup1[-1])  # 反向读取，元组的倒数第2个元素
print(tup1[1:])  # 截取元素，从第2个开始后的所有元素
print(tup1[:3])  # 截取元素，第4个元素前面的所有元素
print(tup1[1:3])  # 截取元素，第1个和第2个元素

# 元组的内置函数
"""
1   len(tuple)：计算元组元素个数。
2   max(tuple)：返回元组中元素最大值。
3   min(tuple)：返回元组中元素最小值。
4   tuple(seq)：将列表转换为元组。
"""



